{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introducing IOT","text":"<p>Welcome to the iot class.</p> <ul> <li>Configure Nano with circuitpython.</li> <li>Configure VS Code app with the nano extension.</li> </ul>"},{"location":"arduino-nano-pin-diagram/","title":"Arduino Nano Pin Diagram","text":""},{"location":"arduino-nano-pin-diagram/#pin-diagram-for-the-arduino-nano-rp2040-connect","title":"Pin diagram for the Arduino Nano rp2040 connect","text":""},{"location":"binder/","title":"Running notebooks online","text":""},{"location":"binder/#running-jupyter-notebooks-interactively-online","title":"Running Jupyter notebooks interactively online","text":"<p>Go to https://mybinder.org/.</p> <p>Enter the url for our iot class:</p> <pre><code>https://github.com/cudmore/iot-fall-2023\n</code></pre> <p>On that webpage click the <code>launch</code> button.</p> <p>Wait a bit and you will get an interface like this.</p> <p></p> <p>Finally, double-click on the left into:</p> <pre><code>docs\n    docs\n        intro-to-python\n</code></pre> <p>You can then run the Jupyter notebooks interactively.</p>"},{"location":"breadboard/","title":"Breadboard Basics","text":""},{"location":"breadboard/#intro-to-the-breadboard","title":"Intro to the breadboard","text":"<p>A breadboard is what we use to wire all our things together including the Arduino.</p> <p></p> <p></p>"},{"location":"breadboard/#pin-holes-are-connected-together","title":"Pin holes are connected together","text":"<p>We have marked the pin holes that are electrically connected (yellow).</p> <ul> <li>The top row is all connected together. We use this for voltage to power our things. Notice the red '+'.</li> <li>The second row is all connected together. We use this for ground of each of our things. Notice the blue '-'. Remember: All things need to be connected to ground!</li> <li>Each vertical row is connected together (with a break in the middle).</li> </ul>"},{"location":"configure-nano/","title":"Configure the Nano with CircuitPython","text":"<p>This is documentation for configuring and using an Arduino Nano rp2040 connect with CircuityPython.</p> <p>We will be programming the Arduino using the CircuitPython language which is a derivative of Python</p>"},{"location":"configure-nano/#install-circuitpython-on-the-nano","title":"Install CircuitPython on the Nano","text":"<p>Download circuitpython here.</p> <p>From that link, you will be saving a file to your computer named <code>adafruit_circuitpython_etc.uf2</code>.</p> <p>Continue by following the instructions here.</p> <p>1) Connect the Nano to your computer with a USB cable.</p> <p>2) To enter the bootloader, double-tap the reset button (highlighted in red). After that, the RPI-RP2 drive will appear as a new disk drive. </p> <p>3) Drag the <code>adafruit_circuitpython_etc.uf2</code> file to RPI-RP2.</p> <p>The RPI-RP2 drive will disappear and a new disk drive called 'CIRCUITPY' will appear.</p> <p>That's it, you're done! :)</p> <p>Troubleshooting</p> <ul> <li> <p>If the drive does not appear, release the reset button, and then repeat the process above.</p> </li> <li> <p>A lot of people end up using charge-only USB cables and it is very frustrating! So make sure you have a USB cable you know is good for data sync.</p> </li> </ul>"},{"location":"configure-vs-code-app/","title":"Configure VS Code","text":"<p>We will be editing code using a desktop app call <code>Visual Studio Code</code>, <code>VS Code</code> for short. In this editor, we will be programming the Arduino using the CircuitPython language which is a derivative of Python. </p>"},{"location":"configure-vs-code-app/#download-and-install-the-vs-code-editor","title":"Download and install the VS Code editor","text":"<p>Download and install the VS Code editor on your computer.</p> <p></p>"},{"location":"configure-vs-code-app/#install-the-circuitpython-extension-in-vs-code","title":"Install the CircuitPython extension in VS Code","text":"<p>Follow this link and click install.</p> <p></p> <p></p> <p>You browser will ask you to open VS Code app, select 'Open Visual Studio Code.app'.</p> <p></p> <p></p> <p>Once in the VS code editor extension section, select 'Install' to install the circuitpython extension in VS code.</p> <p></p>"},{"location":"docs/","title":"Docs","text":"<p>pip install mkdocs mkdocs-material mkdocs-jupyter mkdocstrings mkdocstrings-python</p>"},{"location":"wiring-a-button/","title":"Wiring a button and RGB LED","text":"<p>To begin, we will wire a button and then a RGB LED.</p> <p></p> <p></p>"},{"location":"wiring-a-button/#wiring-a-button","title":"Wiring a button","text":"<p>The button has four legs. When the button is pushed, it connects diagonal legs.</p> <ul> <li>Connect one leg to ground.</li> <li>Connect a diagonal leg to the Arduino Pin D10.</li> </ul> <p>All your wires are the same. They are just different colors to tell them apart.</p> <p></p>"},{"location":"wiring-a-button/#wiring-a-rgb-led","title":"Wiring a RGB LED","text":"<p>The RGB LED has four pins corresponding to:</p> <ul> <li>Ground (-)</li> <li>Red (R) to D2</li> <li>Green (G) to D3</li> <li>Blue (B) to D4</li> </ul> <p>Why red, green, and blue? The RGB color model is an additive color model where different levels of red, green, and blue can create any color in the visible spectrum. This is used for displaying colors on a screen like you phone.</p> <p>If each of R/G/B have equal amount the produced light is white. If all are off, there is no light.</p> <p>For those interested, there is another color space that specifies cyan/magenta/yellow and is used for printing a document. There are also the three primary colors for painting which are red, blue, yellow.</p> <p>See for more info https://techterms.com/definition/rgb.</p>"},{"location":"intro-to-python/1.variables/","title":"1 Variables","text":"In\u00a0[19]: Copied! <pre>aStringVariable = 'This is a string'\n\nprint(aStringVariable)\n</pre> aStringVariable = 'This is a string'  print(aStringVariable) <pre>This is a string\n</pre> In\u00a0[20]: Copied! <pre>anInteger = 10\naFloat = 12.6\n</pre> anInteger = 10 aFloat = 12.6 In\u00a0[23]: Copied! <pre>oneBoolean = True\nanotherBoolean = False\n</pre> oneBoolean = True anotherBoolean = False <p>With just the concept of String, Integer and Float.</p> <p>We can now start thinking about some algebra like add, substract, and divide</p> <p>Here is an axample of add (<code>+</code>).</p> In\u00a0[25]: Copied! <pre>newInteger = 10 + 2\nprint(newInteger)\n\nanInteger = 10\nnewInteger = anInteger + 2\nprint(newInteger)\n</pre> newInteger = 10 + 2 print(newInteger)  anInteger = 10 newInteger = anInteger + 2 print(newInteger) <pre>12\n12\n</pre> <p>And subtract</p> In\u00a0[5]: Copied! <pre>a = 10\nb = 20\nprint(a - b)\n</pre> a = 10 b = 20 print(a - b) <pre>-10\n</pre> <p>And divide</p> In\u00a0[6]: Copied! <pre>a = 10\nb = 20\nprint(a/b)\n</pre> a = 10 b = 20 print(a/b) <pre>0.5\n</pre> <p>With this algebraic notation, we can basically do everyhting you would do in a calculator!</p> In\u00a0[2]: Copied! <pre>aString = 'a'\nanInteger = 6\n</pre> aString = 'a' anInteger = 6 In\u00a0[3]: Copied! <pre>aString + anInteger\n</pre> aString + anInteger <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/Users/cudmore/Dropbox/teaching-2023/iot-fall-2023/docs/docs/intro-to-python/1.variables.ipynb Cell 15 line 1\n----&gt; &lt;a href='vscode-notebook-cell:/Users/cudmore/Dropbox/teaching-2023/iot-fall-2023/docs/docs/intro-to-python/1.variables.ipynb#X33sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; aString + anInteger\n\nTypeError: can only concatenate str (not \"int\") to str</pre> <p>What if we reverse the order? Do we get the same error?</p> In\u00a0[4]: Copied! <pre>anInteger + aString\n</pre> anInteger + aString <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/Users/cudmore/Dropbox/teaching-2023/iot-fall-2023/docs/docs/intro-to-python/1.variables.ipynb Cell 17 line 1\n----&gt; &lt;a href='vscode-notebook-cell:/Users/cudmore/Dropbox/teaching-2023/iot-fall-2023/docs/docs/intro-to-python/1.variables.ipynb#X32sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; anInteger + aString\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'</pre> <p>All Python errors have a name, like <code>TypeError</code> and then a description like <code>can only concatenate str (not \"int\") to str</code>.</p> <p>It is important (and usefull) to read the error and think about the line of code that triggered it.</p> <p>In this case, String + Integer is not allowed. Likewise Integer + String is not allowed.</p> <p>Next, can we add an Integer to a Float? I think we can?</p> In\u00a0[\u00a0]: Copied! <pre>anInt = 10\naFloat = 12.6\nnewVariable = anInt + aFloat\n\nprint(anInt)\nprint(aFloat)\nprint(newVariable)\n</pre> anInt = 10 aFloat = 12.6 newVariable = anInt + aFloat  print(anInt) print(aFloat) print(newVariable) <pre>10\n12.6\n22.6\n</pre> <p>So, when we add an Integer to a Float. We end up with a Float.</p> In\u00a0[24]: Copied! <pre># define some lists\naList = [1, 2, 3]\nanotherList = [10.1, 11, 12.3]\n\npi = 3.1415926535\naThirdList = [aList, 'b', pi]\n\n# print the results\nprint(aList)\nprint(aList[0])\nprint(anotherList[2])\nprint(aThirdList[2])\n</pre> # define some lists aList = [1, 2, 3] anotherList = [10.1, 11, 12.3]  pi = 3.1415926535 aThirdList = [aList, 'b', pi]  # print the results print(aList) print(aList[0]) print(anotherList[2]) print(aThirdList[2]) <pre>[1, 2, 3]\n1\n12.3\n3.1415926535\n</pre> In\u00a0[\u00a0]: Copied! <pre>aFloatVariable = 12.6\nanotherList = [10.1, 11, 12.3]\n\naDictionary = {\n    'firstKey': 'firstKeyValue',\n    'secondKey': 10,\n    'thirdKey': aFloatVariable,\n    'fourthKey': anotherList\n}\n\nprint(aDictionary['secondKey'])\nprint(aDictionary['fourthKey'])\n</pre> aFloatVariable = 12.6 anotherList = [10.1, 11, 12.3]  aDictionary = {     'firstKey': 'firstKeyValue',     'secondKey': 10,     'thirdKey': aFloatVariable,     'fourthKey': anotherList }  print(aDictionary['secondKey']) print(aDictionary['fourthKey']) <pre>10\n[10.1, 11, 12.3]\n</pre>"},{"location":"intro-to-python/1.variables/#variables","title":"Variables\u00b6","text":"<p>Python variables hold values using <code>=</code>. There are a number of different variable types.</p> <p>We will cover 6 different variables types:</p> <ol> <li>String</li> <li>Integer</li> <li>Float</li> <li>Boolean</li> <li>List</li> <li>Dictionary</li> </ol>"},{"location":"intro-to-python/1.variables/#1-string","title":"1) String\u00b6","text":"<p>First we create a string variable and then print its value.</p> <p>Important. All variable values can be printed with <code>print()</code>.</p>"},{"location":"intro-to-python/1.variables/#2-3-integer-and-float","title":"2-3) Integer and Float\u00b6","text":"<ul> <li>Integer types are counting number like 0, 1, 2 and include negative numbers like -5, -3, -2</li> <li>Float types are decimal numbers like 10.2 and 12.6 and also include negative numbers like -26.12</li> </ul> <p>One famous float is Pi = 3.1415926535</p> <p>Making either an integer or float variable is similar to making a string variable.</p>"},{"location":"intro-to-python/1.variables/#4-boolean","title":"4) Boolean\u00b6","text":"<p>Boolean variables can be either <code>True</code> or <code>False</code></p> <p>Important. The words <code>True</code> and <code>False</code> are built into Python.</p>"},{"location":"intro-to-python/1.variables/#errors-in-python","title":"Errors in Python\u00b6","text":"<p>What if we try to add a String and an Integer? Does that make sense?</p>"},{"location":"intro-to-python/1.variables/#5-list","title":"5) List\u00b6","text":"<p>Lists can contain a mixture of different variable types (including lists!). Any item in a list can be <code>indexed</code> with <code>[]</code>. List indices start at <code>0</code>.</p> <p>Important. In this example, we are also adding a comment with <code>#</code>. A comment is something for you to take a note for yourself and is often used to explain to some other person using your code what is going on.</p>"},{"location":"intro-to-python/1.variables/#6-dictionary-beyond-the-scope-of-this-tutorial-but-important","title":"6) Dictionary (beyond the scope of this tutorial but important!)\u00b6","text":"<p>Dictionaries are a container to hold any type of variable including dictionaries!</p> <p>The nice thing about dictionaries is you access the values inside using a <code>key</code>. Because of this, dictionaries are said to represent <code>key value pairs</code>.</p> <p>The syntax for create a dictionary is a bit more complicated. Here, we will focus on accessing data in a dictionary by its key name.</p> <p>The value for each key can be any Python type including Int, Float, String, Dict, etc.!</p>"},{"location":"intro-to-python/1.variables/#review","title":"Review\u00b6","text":"<ul> <li>We went over the basic Python variable types like integer, float, boolean, and string.</li> <li>We introduced a Python list with []. Each element of a list can be any variable type</li> <li>We introduced a Python dictionary that uses a <code>key</code> to access its value. Like a list, the value can in turn be any Python type.</li> </ul> <p>There are a number of other types we did not cover. For example there is:</p> <ul> <li>set() which is an unordered collection of things, like a list but no order using []</li> <li>tuple() is a fixed collection of things, once it is created it can not be modified.</li> </ul>"},{"location":"intro-to-python/2.5.python-indenting/","title":"2.5 Indenting","text":"<p>Now that we covered logic with <code>if</code>, we really need to talk about indending with spaces in Python.</p> <p>Python is very strict with how code is indented or how it has spaces (like the space bar on your keyboard).</p> <p>Here are some examples...</p> In\u00a0[1]: Copied! <pre># here is some valid code\nif 12 == 12:\n    print('yes that is true')\n</pre> # here is some valid code if 12 == 12:     print('yes that is true') <pre>yes that is true\n</pre> In\u00a0[2]: Copied! <pre># here is some invalid code because of indentation/spacing\nif 12 == 12:\nprint('yes that is true')\n</pre> # here is some invalid code because of indentation/spacing if 12 == 12: print('yes that is true') <pre>\n  Cell In[2], line 3\n    print('yes that is true')\n    ^\nIndentationError: expected an indented block after 'if' statement on line 2\n</pre> <p>With that second example, we got a dreaded error:</p> <p><code>IndentationError: expected an indented block after 'if' statement on line 2</code></p> <p>Basically, all <code>if</code> statements have to have the correct indentation of the code to execute when the <code>if</code> is true.</p>"},{"location":"intro-to-python/2.logic/","title":"2 Logic with if ... else","text":"In\u00a0[10]: Copied! <pre># We can start with a Boolean\nmyBoolean = True\nif myBoolean:\n    print('yes, it is true! it is the way.')\n</pre> # We can start with a Boolean myBoolean = True if myBoolean:     print('yes, it is true! it is the way.') <pre>yes, it is true! it is the way.\n</pre> <p>That <code>if</code> statement could be read out loud like:</p> <p><code>If the variable myBoolean is true then print 'it is true! it is the way'</code></p> <p>This is a good example where Python code is easy to read and understand. You can almost speak the code out loud!!!</p> In\u00a0[1]: Copied! <pre>if 1 == 2:\n    print('1 equals 2!')\nelse:\n    print('sorry, 1 does not equal 2')\n</pre> if 1 == 2:     print('1 equals 2!') else:     print('sorry, 1 does not equal 2') <pre>sorry, 1 does not equal 2\n</pre> <p>That code is saying:</p> <p><code>If 1 equals 2 then print '1 equals 2!', otherwise print 'sorry, 1 does not equal 2'</code></p> In\u00a0[8]: Copied! <pre># do that again using variables\na = 1\nb = 2\n\nif a == b:\n    print('a equals b!')\nelse:\n    print('sorry, a does not equal b')\n</pre> # do that again using variables a = 1 b = 2  if a == b:     print('a equals b!') else:     print('sorry, a does not equal b') <pre>sorry, a does not equal b\n</pre> <p>Finally an example where things are true!</p> In\u00a0[9]: Copied! <pre>a = 100\nb = 100\n\nif a == b:\n    print('a equals b!')\nelse:\n    print('sorry, a does not equal b')\n</pre> a = 100 b = 100  if a == b:     print('a equals b!') else:     print('sorry, a does not equal b') <pre>a equals b!\n</pre> <p>Our boolean conditionals are not limited to equals with <code>==</code>, we also have the following boolean conditionals:</p> <ul> <li><code>&gt;</code></li> <li><code>&gt;=</code></li> <li><code>&lt;</code></li> <li><code>&lt;=</code></li> </ul> In\u00a0[15]: Copied! <pre># here is an example\na = 10\nb = 200\nif a &lt; b:\n    print('a is less than b')\n\n# and again with an if .. else\na = 300\nb = 12\nif a &lt; b:\n    print('a is less than b')\nelse:\n    print('sorry, a is not less than b', 'I got a:', a, 'and b:', b)\n</pre> # here is an example a = 10 b = 200 if a &lt; b:     print('a is less than b')  # and again with an if .. else a = 300 b = 12 if a &lt; b:     print('a is less than b') else:     print('sorry, a is not less than b', 'I got a:', a, 'and b:', b) <pre>a is less than b\nsorry, a is not less than b I got a: 300 and b: 12\n</pre>"},{"location":"intro-to-python/2.logic/#logic","title":"Logic\u00b6","text":"<p>Now that we know about variable types like integer, float, string, etc. We can now start programming some logic into our code using <code>if</code> statements.</p> <p>The general form written in pseudo code (not Python) is like this:</p> <pre><code>if &lt;something-is-true&gt; then\n    do something\nelse\n    do something else\n</code></pre>"},{"location":"intro-to-python/2.logic/#boolean-operators-dont-be-afraid","title":"Boolean operators (don't be afraid)\u00b6","text":"<p>Now we will use the boolean operator <code>==</code> in a <code>if</code> statement. That is a double equal sign!</p> <p><code>==</code> is very different from <code>=</code>. The <code>=</code> is used to assign a variable while the <code>==</code> is used to ask if two things are the same (e.g. are equal).</p> <p>All <code>if</code> statements can have an optional <code>else</code>.</p>"},{"location":"intro-to-python/2.logic/#conclusion","title":"Conclusion\u00b6","text":"<p>Logic operations like <code>if .. else</code> are critical to all programming. It allows our code to make choices and perform differently in different situations.</p>"},{"location":"intro-to-python/3.5.looping-with-if/","title":"3.5 Looping Lesson 2","text":"<p>Now that we have the basics for conditionals with <code>if</code> and looping with <code>for</code>.</p> <p>Lets try to bring them together!</p> In\u00a0[6]: Copied! <pre># these are the values we have read from our sensor\nsensorValues = [0, 3, 5, 7, 12, 15, 27, 35, 2, 2, 2, 100]\n\n# we define a threshold where we want to report the value\nthreshold = 12\n\nfor sensorValue in sensorValues:\n    if sensorValue &gt; threshold:\n        print('WARNING: sensor value is above threshold', threshold, 'and has value', sensorValue)\n</pre> # these are the values we have read from our sensor sensorValues = [0, 3, 5, 7, 12, 15, 27, 35, 2, 2, 2, 100]  # we define a threshold where we want to report the value threshold = 12  for sensorValue in sensorValues:     if sensorValue &gt; threshold:         print('WARNING: sensor value is above threshold', threshold, 'and has value', sensorValue)    <pre>WARNING: sensor value is above threshold 12 and has value 15\nWARNING: sensor value is above threshold 12 and has value 27\nWARNING: sensor value is above threshold 12 and has value 35\nWARNING: sensor value is above threshold 12 and has value 100\n</pre> <p>In this example, we loop over each item in <code>sensorValues' and if it is greater than our </code>threshold``, we print a warning.</p>"},{"location":"intro-to-python/3.5.looping-with-if/#real-world-example","title":"Real world example\u00b6","text":"<p>Imagine we have read some value from a sensor and want to take action if the value is above a threshold.</p> <p>In this example, we might be reading from any number of sensors such as a:</p> <ul> <li>thermometer</li> <li>volume control</li> <li>light level sensor</li> <li>earthquake sensor with an accelerometer</li> <li>tilt sensor with a gyroscope</li> <li>microphone</li> </ul>"},{"location":"intro-to-python/3.looping/","title":"3 Looping with for","text":"In\u00a0[1]: Copied! <pre>for i in [3, 5, 7, 9]:\n    print('i is:', i)\n</pre> for i in [3, 5, 7, 9]:     print('i is:', i) <pre>i is: 3\ni is: 5\ni is: 7\ni is: 9\n</pre> <p>The list could also come from a variable!</p> In\u00a0[2]: Copied! <pre>aList = [12, 14, 16, 18]\n\nfor i in aList:\n    print('i is:', i)\n</pre> aList = [12, 14, 16, 18]  for i in aList:     print('i is:', i) <pre>i is: 12\ni is: 14\ni is: 16\ni is: 18\n</pre> <p>When we write</p> <pre><code>for i in [3, 5, 7, 9]:\n    print('i is:', i)\n</code></pre> <p>Python will <code>step</code> over the values in the list and assign <code>i</code> to the value at each <code>step</code>.</p> In\u00a0[3]: Copied! <pre>aString = 'abcdefg'\n\nfor i in aString:\n    print(i)\n</pre> aString = 'abcdefg'  for i in aString:     print(i) <pre>a\nb\nc\nd\ne\nf\ng\n</pre> In\u00a0[6]: Copied! <pre># We can also access a string using our list index with []\naString = 'abcdefg'\n\nprint(aString[2])\n</pre> # We can also access a string using our list index with [] aString = 'abcdefg'  print(aString[2]) <pre>c\n</pre> In\u00a0[7]: Copied! <pre>for i in range(5):\n    print('i is:', i)\n</pre> for i in range(5):     print('i is:', i) <pre>range(0, 5)\ni is: 0\ni is: 1\ni is: 2\ni is: 3\ni is: 4\n</pre> In\u00a0[8]: Copied! <pre># range can of course take an integer variable\nmyRange = 3\nfor i in range(myRange):\n    print('i is:', i)\n</pre> # range can of course take an integer variable myRange = 3 for i in range(myRange):     print('i is:', i)      <pre>i is: 0\ni is: 1\ni is: 2\n</pre> <p>Can range(int) take a float? If your not sure, just test it out!</p> In\u00a0[9]: Copied! <pre>myFloat = 3.14\nfor i in range(myFloat):\n    print('i is:', i)\n</pre> myFloat = 3.14 for i in range(myFloat):     print('i is:', i) <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/Users/cudmore/Dropbox/teaching-2023/iot-fall-2023/docs/docs/3.looping.ipynb Cell 13 line 2\n      &lt;a href='vscode-notebook-cell:/Users/cudmore/Dropbox/teaching-2023/iot-fall-2023/docs/docs/3.looping.ipynb#X16sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; myFloat = 3.14\n----&gt; &lt;a href='vscode-notebook-cell:/Users/cudmore/Dropbox/teaching-2023/iot-fall-2023/docs/docs/3.looping.ipynb#X16sZmlsZQ%3D%3D?line=1'&gt;2&lt;/a&gt; for i in range(myFloat):\n      &lt;a href='vscode-notebook-cell:/Users/cudmore/Dropbox/teaching-2023/iot-fall-2023/docs/docs/3.looping.ipynb#X16sZmlsZQ%3D%3D?line=2'&gt;3&lt;/a&gt;     print('i is:', i)\n\nTypeError: 'float' object cannot be interpreted as an integer</pre> <p>Nope, range(int) can not take a float. The error is actually informative, it tells us that range(int) by its definition is expecting an <code>int</code> value variable.</p> <p><code>TypeError: 'float' object cannot be interpreted as an integer</code></p>"},{"location":"intro-to-python/3.looping/#looping-with-for","title":"Looping with <code>for</code>\u00b6","text":"<p>We have covered variable types and if statements.</p> <p>Now we want to try looping some code with the keyword <code>for</code></p> <p>We will start with a simple example using a List of [3, 5, 7, 9]</p>"},{"location":"intro-to-python/3.looping/#is-a-string-a-list","title":"Is a string a list?\u00b6","text":"<p>Python is incredibly flexible. For example, a string can be treated like a list.</p> <p>This makes sense? A string is just a list of characters.</p>"},{"location":"intro-to-python/3.looping/#built-in-functions","title":"Built in functions\u00b6","text":"<p>We have been using some built in function in Python. Things like <code>if ... else</code> and `print()``.</p> <p>For looping there is one very useful built in function named <code>range(int)</code>. Range takes an integer value and returns a list from 0 up to value-1.</p> <p>Here are some examples.</p>"},{"location":"intro-to-python/4.functions/","title":"4 Functions","text":"In\u00a0[1]: Copied! <pre># first we define a function to add to numbers\ndef add(a, b):\n    return a + b\n</pre> # first we define a function to add to numbers def add(a, b):     return a + b In\u00a0[3]: Copied! <pre># now we will use our new function\n\nprint(add(1, 2))\n\nresult = add(3, 4)\nprint('result:', result)\n</pre> # now we will use our new function  print(add(1, 2))  result = add(3, 4) print('result:', result) <pre>3\nresult: 7\n</pre> In\u00a0[5]: Copied! <pre># we can also pass our own variables to a function\nfirstNumber = 12\nsecondNumber = 20\n\nresult = add(firstNumber, secondNumber)\n\nprint('my result is:', result)\n</pre> # we can also pass our own variables to a function firstNumber = 12 secondNumber = 20  result = add(firstNumber, secondNumber)  print('my result is:', result) <pre>my result is: 32\n</pre> In\u00a0[7]: Copied! <pre># a function to test if a value is above a threshold\ndef isAboveThreshold(value, threshold):\n    \"\"\"Return True if value &gt; threshold, otherwise False.\n    \"\"\"\n    return value &gt; threshold\n\n# these are the values we have read from our sensor\nsensorValues = [0, 3, 5, 7, 12, 15, 27, 35, 2, 2, 2, 100]\n\n# we define a threshold where we want to report the value\nthreshold = 12\n\nfor sensorValue in sensorValues:\n    if isAboveThreshold(sensorValue, threshold):\n        print('WARNING: sensor value is above threshold', threshold, 'and has value', sensorValue)\n</pre> # a function to test if a value is above a threshold def isAboveThreshold(value, threshold):     \"\"\"Return True if value &gt; threshold, otherwise False.     \"\"\"     return value &gt; threshold  # these are the values we have read from our sensor sensorValues = [0, 3, 5, 7, 12, 15, 27, 35, 2, 2, 2, 100]  # we define a threshold where we want to report the value threshold = 12  for sensorValue in sensorValues:     if isAboveThreshold(sensorValue, threshold):         print('WARNING: sensor value is above threshold', threshold, 'and has value', sensorValue)   <pre>WARNING: sensor value is above threshold 12 and has value 15\nWARNING: sensor value is above threshold 12 and has value 27\nWARNING: sensor value is above threshold 12 and has value 35\nWARNING: sensor value is above threshold 12 and has value 100\n</pre>"},{"location":"intro-to-python/4.functions/#review","title":"Review\u00b6","text":"<p>Wow, we've made a lot of progress here</p> <ul> <li>Variable types like integer, float, string, boolean, list, and dictionary</li> <li>`if<code>statements using a boolean operator like</code>==``</li> <li>`for`` loops</li> <li>bringing together <code>for`` loops with </code>if`` statements</li> </ul> <p>We also touched on</p> <ul> <li>The print() statement</li> <li>The use of <code>#</code> to make a free-form comment in our code (e.g. note to self)</li> <li>The importance of indentation/spacing in Python</li> </ul>"},{"location":"intro-to-python/4.functions/#the-next-concept-is-a-python-function-using-def","title":"The next  concept is a Python <code>function</code> using <code>def</code>.\u00b6","text":"<p>We will start with some examples.</p>"},{"location":"intro-to-python/4.functions/#important-concept","title":"Important concept\u00b6","text":"<p>Our function defined as</p> <pre><code>def add(a, b):\n    return a + b\n</code></pre> <p>Does not expect a variable named <code>a</code> or <code>b</code>, it just expects a number for <code>a</code> and a number for <code>b</code>.</p>"},{"location":"intro-to-python/4.functions/#recap-on-function","title":"Recap on function\u00b6","text":"<p>A <code>function</code> is a fundamental concept in mathematics.</p> <p>It takes some inputs, performs a calculation, and return a result.</p> <p>We have been using functions all along, <code>print()</code> is a function. It takes an input and prints it to the notebook.</p>"},{"location":"intro-to-python/4.functions/#brining-it-together","title":"Brining it together\u00b6","text":"<p>Lets use a function to test if our sensor is above a given threshold</p>"},{"location":"intro-to-python/5.classes/","title":"5 Classes","text":"In\u00a0[\u00a0]: Copied! In\u00a0[3]: Copied! <pre>class MyClass():\n    def __init__(self):\n        self.aVariable = 1.1\n\n    def getVariable(self):\n        return self.aVariable\n</pre> class MyClass():     def __init__(self):         self.aVariable = 1.1      def getVariable(self):         return self.aVariable <p>Each class can have its own local variables like <code>self.aVariable</code></p> <p>Each class can have its own functions like <code>def getVariable(self)</code></p> <p>A particular thing about classes is they use a Python keyword <code>self</code>. This lets pythhon know you are defining something for the class you are in. In our example, we made a class named <code>MyClass</code></p> <p>Variables defined in a class are called <code>member variables</code>. Functions defined in a class are called <code>member functions</code>.</p> <p>Now lets us the class.</p> In\u00a0[4]: Copied! <pre># we instantiate a class of type MyClass\nmyClassVariable = MyClass()\n\n# we can then call member functions on our new type MyClass\nprint(myClassVariable.getVariable())\n</pre> # we instantiate a class of type MyClass myClassVariable = MyClass()  # we can then call member functions on our new type MyClass print(myClassVariable.getVariable()) <pre>1.1\n</pre> <p>Our code that will run on the Arduino Nano uses classes for most everything. They allow us to group similar ideas into one set of code.</p> <p>Uses classes like this is what make <code>object oriented programming</code> versus  <code>functional programming</code>.</p> <p>Some examples of classes we will use are:</p> <ul> <li>iotButton - Implements all the code to listen for button pushes.</li> <li>iotLed - Implements all the code to control an LED.</li> </ul> <p>Classes are useful for what is called <code>data abstraction</code>. As the programmer, you don't need to know the details of how a class is implemented, you only need to know about the member function it defines.</p> <p>When done properly, this system provides an <code>application programming interface</code> or API.</p> <p>Other example classes we will use demonstrate this well.</p> <ul> <li>iotWifi - A class to abstract away all the details of connecting to Wifi.</li> <li>iotMqtt - A class to abstract away all the details of using Mqtt to publish and subscribe to data on Adafruit IO.</li> </ul>"},{"location":"intro-to-python/5.classes/#classes-in-python","title":"Classes in Python\u00b6","text":"<p>So far we have gone over built in variable types like integer, float, and boolean. Now we turn to the final variable type that is called a <code>class</code>.</p> <p>Classes do not exist by default but need to be create by us, the programmers!</p> <p>Here is a simple example.</p>"}]}